@php
echo '<?php';
@endphp


namespace {{$namespace}};

@hasSection('custom-warnings')
@else
/*
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * THIS FILE IS AUTO-GENERATED BY AUTOMODEL:TABLE COMMAND
 * ANY CHANGES MADE TO THIS FILE MAY BE LOST
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */
@endif

@yield('custom-uses')
@hasSection('custom-extends')
@else
use Illuminate\Database\Eloquent\Model;
@endif
@if ($hasDeletedAt)
use Illuminate\Database\Eloquent\SoftDeletes;
@endif
@foreach($traits as $trait)
use {{$trait->use}};
@endforeach
@yield('custom-headers')

/**
 * {{$description}}
 *
 * Class {{$name}}
 * {{'@'}}package {{$namespace}}
 *
@yield('custom-definitions')
@foreach ($attributes as $attribute)
 * {{'@'}}property {{$attribute->type}} ${{$attribute->name}}
@endforeach
 */
class {{$name}} extends @hasSection('custom-extends') @yield('custom-extends') @else {{$extends}} @endif

{
@yield('custom-traits')
@if ($hasDeletedAt)
	use SoftDeletes;
@endif
@foreach($traits as $trait)
	use {{$trait->name}};
@endforeach

	/**
	 * The table associated with the model.
	 *
	 * {{'@'}}var string
	 */
	protected $table = '{{$table}}';

@if (!$hasCreatedAt || !$hasUpdatedAt)
	/**
	 * Indicates if the model should be timestamped.
	 *
	 * {{'@'}}var bool
	 */
	public $timestamps = false;
@endif

	/**
	 * The attributes that should be hidden for arrays.
	 *
	 * {{'@'}}var array
	 */
	protected $hidden = ['pivot'@if($hasDeletedAt), 'deleted_at'@endif @yield('custom-hiddens')];

@if (isset($fillables) && !empty($fillables))
	/**
	 * The attributes that are mass assignable.
	 *
	 * {{'@'}}var array
	 */
	protected $fillable = [@foreach($fillables as $fillable)'{{$fillable}}'@if($fillable != end($fillables)),@endif @endforeach];
@endif

@hasSection('custom-appends')
@yield('custom-appends')
@else
	/**
	 * The attributes appended to the model's JSON form.
	 *
	 * {{'@'}}var array
	 */
	protected $appends = [];
@endif

@if (!empty($dates))
	/**
	 * The attributes that should be mutated to dates.
	 *
	 * {{'@'}}var array
	 */
	protected $dates = [@foreach($dates as $date)'{{$date}}'@if($date != end($dates)),@endif @endforeach];
@endif

@yield('custom-properties')

@if ($hasCreatedAt xor $hasUpdatedAt)
	/**
	 * The "booting" method of the model.
	 *
	 * {{'@'}}return void
	*/
	public static function boot()
	{
		parent::boot();
@if ($hasCreatedAt)
		// Automatically fill created_at field
		static::creating(function ($model) {
			$model->created_at = $model->freshTimestamp();
		});
@endif
@if ($hasUpdatedAt)
		// Automatically fill updated_at field
		static::updating(function ($model) {
			$model->updated_at = $model->freshTimestamp();
		});
@endif
	}
@endif

@foreach ($foreignKeys as $foreignKey)
@if ($foreignKey->type === 'belongsToMany')
	/**
	 * {{'@'}}return \Illuminate\Database\Eloquent\Relations\BelongsToMany
	 */
	public function {{$foreignKey->name}}()
	{
		return $this->belongsToMany(
			// Model
			'{{$foreignKey->model}}',
			// Pivot table
			'{{$foreignKey->table}}',
			// "Our" key
			'{{$foreignKey->foreign_key}}',
			// "Their" key
			'{{$foreignKey->other_key}}'
		)@php
			if (!empty($foreignKey->columns)) {
				echo "\n";
				echo '->with(\''.implode("', '", $foreignKey->columns).'\')';
			}
			if ($foreignKey->has_deleted_at) {
				echo "\n";
				echo '->whereNull(\''.$foreignKey->table.'.deleted_at\')';
			}
			if ($foreignKey->has_timestamps) {
				echo "\n";
				echo '->withTimestamps()';
			}
		@endphp;
	}

@elseif ($foreignKey->type === 'hasOne')
	/**
	 * {{'@'}}return \Illuminate\Database\Eloquent\Relations\HasOne
	 */
	public function {{$foreignKey->name}}()
	{
		return $this->hasOne(
			// Model
			'{{$foreignKey->model}}',
			// Foreign key
			'{{$foreignKey->foreign_key}}',
			// Local key
			'{{$foreignKey->other_key}}'
		);
	}

@elseif ($foreignKey->type === 'hasMany')
	/**
	 * {{'@'}}return \Illuminate\Database\Eloquent\Relations\HasMany
	 */
	public function {{$foreignKey->name}}()
	{
		return $this->hasMany(
			// Model
			'{{$foreignKey->model}}',
			// Foreign key
			'{{$foreignKey->foreign_key}}',
			// Local key
			'{{$foreignKey->other_key}}'
		);
	}

@elseif ($foreignKey->type === 'belongsTo')
	/**
	 * {{'@'}}return \Illuminate\Database\Eloquent\Relations\BelongsTo
	 */
	public function {{$foreignKey->name}}()
	{
		return $this->belongsTo(
			// Model
			'{{$foreignKey->model}}',
			// Foreign key
			'{{$foreignKey->foreign_key}}',
			// Other key
			'{{$foreignKey->other_key}}'
		);
	}

@endif
@endforeach

@foreach ($scopes as $scope)
@if (is_string($scope))
	/**
	 * {{'@'}}param string ${{lcfirst($scope)}} The scope to search
	 * {{'@'}}param \Illuminate\Database\Eloquent\Builder $query
	 * {{'@'}}return \Illuminate\Database\Eloquent\Builder
	 */
	public function scope{{ucfirst($scope)}}($query, ${{lcfirst($scope)}})
	{
		return $query->where('{{lcfirst($scope)}}', '=', ${{lcfirst($scope)}});
	}

@else
	/**
@if (isset($scope->variable))
	 * {{'@'}}param string {{lcfirst($scope->variable)}} The scope to search
@elseif (!isset($scope->value))
	 * {{'@'}}param string ${{lcfirst($scope->name)}} The scope to search
@endif
	 * {{'@'}}param \Illuminate\Database\Eloquent\Builder $query
	 * {{'@'}}return \Illuminate\Database\Eloquent\Builder
	 */
	public function scope{{ucfirst($scope->name)}}($query @if (isset($scope->variable)), {{lcfirst($scope->variable)}} @endif)
	{
		return $query->where('{{lcfirst($scope->field)}}', @php
			if (isset($scope->symbol) && !empty($scope->symbol)) {
				echo '\''.$scope->symbol.'\', ';
			}
			if (isset($scope->value)) {
				echo $scope->value;
			} else if(isset($scope->variable)) {
				echo lcfirst($scope->variable);
			} else {
				echo '$'.lcfirst($scope->name);
			}
		@endphp);
	}

@endif
@endforeach

@yield('custom-functions')
}